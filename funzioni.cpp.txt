#include <funzioni.h> 
#include <iostream>   
#include <string>     
using namespace std;  

// Funzione per leggere un messaggio da un file
void lettura(){
    string messaggio; 
    ifstream fin("msg.txt"); // Apertura del file "msg.txt" in modalità lettura

    if (!fin) { // Controllo se il file è stato aperto correttamente
        cout<<"Errore nell'apertura del file in lettura" << endl;
    }

    fin >> messaggio; // Lettura del messaggio dal file
    fin.close(); // Chiusura del file
}

// Funzione per scrivere un messaggio in un file
void scrittura(string messaggio){
    ofstream fout("frame.txt"); // Apertura del file "frame.txt" in modalità scrittura

    if(!fout){ // Controllo se il file è stato aperto correttamente
        cout<<"Errore nell'apertura del file in scrittura"<<endl;
    }

    fout<<messaggio; // Scrittura del messaggio nel file
    fout.close(); // Chiusura del file
}

// Funzione per convertire un carattere in una stringa binaria
string charToBin(char c){
    string numBinario; // Stringa per memorizzare la rappresentazione binaria
    for(int i = 7; i >= 0; i--){ // Ciclo per esaminare ogni bit del carattere (8 bit)

        if(c & (1 << i)){ // Controllo se il bit i-esimo è impostato a 1
            numBinario += '1'; // Se sì, aggiungi '1' alla stringa binaria
        }else{
            numBinario += '0'; // Altrimenti, aggiungi '0'
        }
    }
    cout<<numBinario; // Stampa la rappresentazione binaria a schermo
    return numBinario; // Restituisce la stringa binaria
}

// Funzione per convertire una stringa in una stringa binaria
string stringToBin(string &messaggio){
    string risultato; // Stringa per memorizzare la rappresentazione binaria della stringa
    for(char c : s){ // Itera su ogni carattere della stringa
        for(int i = 7; i >= 0; i--){ // Ciclo per esaminare ogni bit del carattere (8 bit)
            if(c & (1 << i)){ // Controllo se il bit i-esimo è impostato a 1
                risultato += '1'; // Se sì, aggiungi '1' alla stringa binaria
            }else{
                risultato += '0'; // Altrimenti, aggiungi '0'
            }
        }
    }
    cout<<risultato; // Stampa la rappresentazione binaria a schermo
    return risultato; // Restituisce la stringa binaria
}

// Funzione per creare un datagramma IP (IpHeader non è definito nel codice)
void creaDatagram(){
    IpHeader header; // Creazione di una struttura IpHeader (non definita nel codice)
    header.version_ihl = 0x45;           // Imposta versione IPv4 e lunghezza intestazione
    header.type_of_service = 0;          // Imposta il tipo di servizio predefinito
    header.total_length = 20;            // Imposta la lunghezza totale del datagramma
    header.identification = 12345;       // Imposta un'identificazione arbitraria
    header.flags_fragment_offset = 0;    // Imposta flag e offset del frammento (nessun frammento)
    header.time_to_live = 64;            // Imposta il Time to Live (TTL) predefinito
    header.protocol = 6;                 // Imposta il protocollo TCP (6)
    header.header_checksum = 0;          // Imposta il checksum inizialmente a 0
    header.source_address = 0xC0A80101;  // Imposta l'indirizzo IP sorgente (192.168.1.1)
    header.destination_address = 0xC0A80102; // Imposta l'indirizzo IP destinazione (192.168.1.2)
}

// Funzione per stampare i dettagli dell'header IP (IpHeader non è definito nel codice)
void stampaHeader(creaDatagram()){
    cout << "Version + IHL: " << hex << header.version_ihl << endl; // Stampa versione e IHL
    cout << "Type of Service: " << dec << header.type_of_service << endl; // Stampa tipo di servizio
    cout << "Total Length: " << header.total_length << endl; // Stampa lunghezza totale
    cout << "Identification: " << header.identification << endl; // Stampa identificazione
    cout << "Flags + Fragment Offset: " << header.flags_fragment_offset << endl; // Stampa flag e offset
    cout << "Time to Live: " << header.time_to_live << endl; // Stampa TTL
    cout << "Protocol: " << header.protocol << endl; // Stampa protocollo
    cout << "Header Checksum: " << header.header_checksum << endl; // Stampa checksum
    cout << "Source Address: " << hex << header.source_address << endl; // Stampa indirizzo sorgente
    cout << "Destination Address: " << header.destination_address << endl; // Stampa indirizzo destinazione
}
